 /*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/mouse.h>

#include <behaviors/mouse_keys.dtsi>
#define DEFAULT 0
#define UPPER 1
#define LOWER 2
#define GAME 3
#define NUM_L 1 2 3 4 5
#define NUM_R 6 7 8 9 10

#define ALPHA_L 13 14 15 16 17 \
                25 26 27 28 29 \
                37 38 39 40 41 42
#define ALPHA_R 18 19 20 21 22 \
                30 31 32 33 34 \
             43 44 45 46 47 48

#define MACRO_L 0 12 24 36
#define MACRO_R 11 23 35 49

#define THUMBS 50 51 52 53 54

/ {
    combos {
        compatible = "zmk,combos";
        // symbols
        combo_sqt {
            timeout-ms = <50>;
            key-positions = <14 15>;
            layers = <1>;
            bindings = <&kp SQT>;
        };
        combo_dqt {
            timeout-ms = <50>;
            key-positions = <15 16>;
            layers = <1>;
            bindings = <&kp DQT>;
        };
        combo_lpar {
            timeout-ms = <50>;
            key-positions = <19 20>;
            layers = <1>;
            bindings = <&kp LPAR>;
        };
        combo_rpar {
            timeout-ms = <50>;
            key-positions = <20 21>;
            layers = <1>;
            bindings = <&kp RPAR>;
        };
        combo_lbkt {
            timeout-ms = <50>;
            key-positions = <31 32>;
            layers = <1>;
            bindings = <&kp LBKT>;
        };
        combo_rbkt {
            timeout-ms = <50>;
            key-positions = <32 33>;
            layers = <1>;
            bindings = <&kp RBKT>;
        };
        combo_lbrc {
            timeout-ms = <50>;
            key-positions = <45 46>;
            layers = <1>;
            bindings = <&kp LBRC>;
        };
        combo_rbrc {
            timeout-ms = <50>;
            key-positions = <46 47>;
            layers = <1>;
            bindings = <&kp RBRC>;
        }; 

        combo_gamelayer {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&tog 3>;
        };
    };

    behaviors {
        bhml: balanced_homerow_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <230>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <80>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <NUM_R ALPHA_R MACRO_R THUMBS>;    // <---[[the W key]]
            hold-trigger-on-release;
        };

        bhmr: balanced_homerow_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <230>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <80>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <NUM_L ALPHA_L MACRO_L THUMBS>;    // <---[[the W key]]
            hold-trigger-on-release;
        };
 
        capstd: tap_dance_caps {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&caps_word>, <&kp CAPS>;
        };

        alttabtd: tap_dance_alttab {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp TAB>, <&kp LA(TAB)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
 
        default_layer {
// ------------------------------------------------------------------------------------------------------------
// |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |  DEL  |
// |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   `   |
// | SHIFT |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
// |  CTRL |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
//                            | LALT | LOWER|  SPACE |  | ENTER | RALT | 

            bindings = <
&kp ESC    &kp N1  &kp N2  &kp N3   &kp N4     &kp N5                     /**/              &kp N6   &kp N7  &kp N8         &kp N9   &kp N0    &kp DEL
&kp TAB    &kp Q   &kp W   &kp E    &kp R      &kp T                      /**/              &kp Y    &kp U   &kp I          &kp O    &kp P     &kp GRAVE
&kp LSHIFT &kp A   &kp S   &kp D    &kp F      &kp G                      /**/              &kp H    &kp J   &kp K          &kp L    &kp SEMI  &kp SQT
&kp LCTRL  &kp Z   &kp X   &kp C    &kp V      &kp B        &lt 2 LBKT    /**/   &lt 2 RBKT &kp N    &kp M   &kp COMMA    &kp DOT  &kp FSLH  &kp RSHIFT
                                     &kp LALT  &lt 1 SPACE  &kp BSPC      /**/   &kp RET    &lt 1 RALT                         
            >;
        };

// ------------------------------------------------------------------------------------------------------------
// |  F12  | F1  | F2  | F3   | F4   | F5   |                   | F6   | F7    | F8    | F9   |  F10  |  F11  |
// |  TAB  |     |     |      | HOME | END  |                   |      |       |  UP   |      |       |       |
// | SHIFT |     |     |      | PGDN | PGUP |                   |      |  LEFT |  DWN  | RGT  |       |       |
// |  CTRL |     |     |LC(C) |LC(V) |      |   "["  |  |  "]"  |      |  LCLK | SCLK  | RCLK |       | SHIFT |
//                            | LALT | LOWER|  SPACE |  | ENTER | RALT |
//&mkp LCLK  &mkp SCLK  &mkp RCLK
        upper_layer {
            bindings = <
&kp F12    &kp F1     &kp F2      &kp F3     &kp F4          &kp F5               /**/           &kp F6   &kp F7     &kp F8    &kp F9     &kp F10   &kp F11
&kp TAB    &trans     &trans      &trans     &kp HOME        &kp END              /**/           &trans   &trans     &kp UP    &kp O      &trans    &trans
&kp LSHIFT &trans     &trans      &trans     &kp PAGE_DOWN   &kp PAGE_UP          /**/           &trans   &kp LEFT   &kp DOWN  &kp RIGHT  &trans    &trans
&kp LCTRL  &trans     &trans      &kp LC(C)  &kp LC(V)       &trans     &kp LBKT  /**/  &kp RBKT &trans   &mkp LCLK  &mkp SCLK &mkp RCLK  &trans    &kp RSHIFT 
                                             &kp LALT        &kp SPACE  &kp SPACE /**/  &kp RET  &kp RALT                            
            >;
        };

// ------------------------------------------------------------------------------------------------------------
// |  ESC  |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |  )    |  BKSP |
// | BTCLR | BT1 | BT2 | BT3  | BT4  | BT5  |                   |  -   |  =    |  [    |  ]   |  \    |  `    | 
// | SHIFT |     |     |      |      |      |                   |  _   |  +    |  {    |  }   | "|"   |  ~    | 
// |  CTRL |     |     |      |      |      |   "["  |  |  "]"  |      |       |       |      |       | SHIFT |
//                            | LALT | LOWER|  SPACE |  | ENTER | RALT |
//| BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 
//&bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4

        lower_layer {
            bindings = <
&kp ESC    &kp EXCL     &kp AT       &kp HASH     &kp DLLR     &kp PRCNT           /**/           &kp CARET &kp AMPS      &kp ASTRK     &kp LPAR    &kp RPAR &kp BSPC 
&bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4        /**/           &kp MINUS &kp EQUAL     &kp LBKT      &kp RBKT    &kp BSLH &kp GRAVE
&kp LSHIFT &trans       &trans       &trans       &trans       &trans              /**/           &kp UNDER &kp PLUS      &kp LBRC      &kp RBRC    &kp PIPE &kp TILDE
&kp LCTRL  &trans       &trans       &trans       &trans       &trans    &kp LBKT  /**/  &kp RBKT &trans    &trans        &trans        &trans      &trans   &kp RSHIFT
                                                  &kp LALT     &kp SPACE &kp SPACE /**/  &kp RET &kp RALT                             
            >;
        };
    };
};
